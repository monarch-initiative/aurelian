[project]
name = "aurelian"
version = "0.4.3"
description = "aurelian"
authors = [{ name = "Christopher Mungall", email = "cjmungall@lbl.gov" }]
requires-python = "~=3.11"
readme = "README.md"
license = "MIT"
dependencies = [
    "click",
    "importlib-metadata>=8.2.0",
    "oaklib>=0.6.19",
    "tabulate>=0.9.0",
    "linkml-store[llm, mongodb]>=0.2.4",
    "pydantic-ai>=0.2.0",
    "logfire>=3.5.3",
    "bs4>=0.0.2",
    "duckduckgo-search>=7.3.2",
    "markdownify>=0.14.1",
    "wikipedia>=1.4.0",
    "onnxruntime<=1.19.0",
    "markitdown>=0.1.1",
    "undetected-chromedriver>=3.5.5",
    "mcp[cli]>=1.3.0,<2",
    "pytest-asyncio>=0.25.3,<0.26",
    "cairosvg>=2.7.1,<3",
    "paper-qa>=5.20.0,<6",
]

[project.optional-dependencies]
rdkit = ["rdkit"]
gocam = ["gocam"]
gradio = ["gradio>=5.23.3,<6"]
bioservices = ["bioservices>=1.12.0"]
linkml = ["linkml"]
chem = ["rdkit"]
pdfminer = ["pdfminer-six"]
pdf = ["PyPDF2"]
pypaperbot = ["pypaperbot>=1.4.1"]

[project.scripts]
aurelian = "aurelian.cli:main"
aurelian-mcp-gocam = "aurelian.agents.gocam.gocam_mcp:main"

[dependency-groups]
dev = [
    "pytest>=8.3.2",
    "pytest-reportlog",
    "pytest-metadata",
    "tox>=4.16.0",
    "mypy",
    "types-PyYAML",
    "jupyter",
    "papermill",
    "nbdime",
    "nbformat",
    "pre-commit>=3.3.3",
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocs-mermaid2-plugin",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    "mknotebooks>=0.8.0",
    "mkdocs-windmill",
    "mkdocs-click",
    "mkdocstrings[crystal, python]",
    "typer>=0.9.0",
]

[tool.uv]
default-groups = [
    "dev",
    "docs",
]
package = true

[tool.pytest.ini_options]
markers = [
    "integration: marks tests as integration tests that might have external dependencies",
    "flaky: marks tests that might occasionally fail due to external conditions",
]

[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310"]

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
extend-ignore = [
    "S101",  # Allow assert statements in tests
    "D104",  # Ignore missing docstrings in __init__.py
    "D417",  # Ignore missing argument descriptions in docstrings
    "D401",  # Ignore enforcing imperative mood in docstrings
    "D400", "D415",  # Ignore docstring punctuation enforcement
    "D200",  # Ignore "one-line docstring should fit on one line"
    "F821",  # Ignore undefined name errors (useful if missing imports)
    "S113",  # Ignore "requests call without timeout" warnings
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101"]  # Ignore asserts only in test files

fixable = ["ALL"]
select = [
    "B",  # bugbear
    "D",  # pydocstyle
    "E",  # pycodestyle errors
    "F",  # Pyflakes
    "I",  # isort
    "S",  # flake8-bandit
    "W",  # Warning
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.codespell]
skip = "*.po,*.ts,.git,pyproject.toml"
count = ""
quiet-level = 3
